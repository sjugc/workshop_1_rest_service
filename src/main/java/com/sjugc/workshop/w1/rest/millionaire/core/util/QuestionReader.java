package com.sjugc.workshop.w1.rest.millionaire.core.util;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.xml.transform.stream.StreamSource;
import org.springframework.oxm.XmlMappingException;
import org.springframework.oxm.jaxb.Jaxb2Marshaller;
import com.sjugc.workshop.w1.rest.millionaire.core.model.Question;
import com.sjugc.workshop.w1.rest.millionaire.core.model.QuestionStatus;
import com.sjugc.workshop.w1.rest.millionaire.core.model.generated.AnwserType;
import com.sjugc.workshop.w1.rest.millionaire.core.model.generated.QuestionType;
import com.sjugc.workshop.w1.rest.millionaire.core.model.generated.Questions;

/**
 * Utility class for reading game questions from XML file from classpath.
 * 
 * @author mjovanovic
 */
public final class QuestionReader {

    /**
     * {@link Jaxb2Marshaller} Jaxb2Marshaller
     */
    private Jaxb2Marshaller marshaller;

    /**
     * Constructor
     * 
     * @param marshaller {@link Jaxb2Marshaller} instance.
     */
    public QuestionReader( Jaxb2Marshaller marshaller ) {
        this.marshaller = marshaller;
    }

    /**
     * Fetching 15 questions for game.
     * 
     * @return {@link List} of 15 {@link Question}s
     */
    public List<Question> readQuestions() {
        // Fetching all questions from XML.
        List<Question> questions = getAllQuestions();

        // Shuffle list
        Collections.shuffle( questions );

        // Extract only first 15 questions.
        List<Question> selectedQuestions = new ArrayList<>();
        for ( int i = 0; i < questions.size(); i++ ) {
            if ( i < 15 ) {
                // Get question
                Question q = questions.get( i );

                // Get correct answer to question
                String correct = q.getAnswers().get( q.getCorrect() );

                // Shuffle anwsers order
                Collections.shuffle( q.getAnswers() );

                // Find index of correct answer
                for ( int j = 0; j < q.getAnswers().size(); j++ ) {
                    if ( q.getAnswers().get( j ).equals( correct ) ) {
                        q.setCorrect( j );
                        break;
                    }
                }

                // Add question to selected list
                selectedQuestions.add( q );
            } else {
                break;
            }
        }

        // Return list of selected questions.
        return selectedQuestions;
    }

    /**
     * Remapping from JAXB autogenerated modetl to our model.
     * 
     * @return {@link List} of all {@link Question}s from XML file.
     */
    public List<Question> getAllQuestions() {
        // Read all questions from XML
        Questions qs = readFile();

        // Iterate through all questions
        List<Question> questions = new ArrayList<>();
        for ( QuestionType q : qs.getQuestion() ) {

            // Create answer list
            List<String> answers = new ArrayList<>();

            // Append all possible answers
            for ( AnwserType a : q.getAnwser() ) {
                answers.add( a.getText() );
            }

            // Create question
            Question question = new Question( q.getText(), answers, q.getCorrect().intValue(), QuestionStatus.UNREADED );

            // Add question to list
            questions.add( question );
        }

        // Return all questions
        return questions;
    }

    /**
     * Reading XML file 'questions.xml' from classpath and unmarshall it.
     * 
     * @return {@link Questions} instance or null if read fail.
     */
    private Questions readFile() {
        try {
            // Getting InputStream of classpath resource
            InputStream resource = QuestionReader.class.getResourceAsStream( "/questions.xml" );
            // Unmarshall and return instance
            return (Questions) marshaller.unmarshal( new StreamSource( resource ) );
        }
        catch ( XmlMappingException e ) {
            // TODO [mjovanovic] Add some logging..
            // e.printStackTrace();
        }
        return null;
    }

}
